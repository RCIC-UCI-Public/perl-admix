# Copyright (c) 2000 - 2019 The Regents of the University of California.
# All rights reserved.	
# This includes the Generic yaml2rpm Makefile - most packaging should
# be able to use this.

# redefine BUILDALL_TARGETS
ALL_TARGETS = MyConfig.pm bootstrap default
manifest buildall :: prep

include $(YAML2RPM_HOME)/sys/Makefile

# when building targets for different perl version need to give on a commadn line
# set name, for example SET='latest'
ifeq ($(SET),)
    VERSIONS := versions.yaml
else
    VERSIONS := versions-$(SET).yaml
endif
PERLVER = $(shell $(GENERATE) --query=version perl.yaml -V $(VERSIONS))

prep: metaprep bioprep genprep alldownload
alldownload: metadownload biodownload gendownload

# specific to metacpan/ modules
BASE_SRCVER = $(shell $(GENERATE) --query=metacpan_tarsources perl.yaml)
BASELINE = $(shell cat metacpan/buildorder)
BASERPMS = $(addprefix perl_$(PERLVER)-,$(BASELINE)) perl_$(PERLVER)-baseline-metacpan

# specific to bioperl/ modules
BIO_SRCVER = $(shell $(GENERATE) --query=bioperl_tarsources perl.yaml)
BIO = $(shell cat bioperl/buildorder)
BIORPMS = $(addprefix perl_$(PERLVER)-,$(BIO)) perl_$(PERLVER)-baseline-bioperl

# specific to genomics/ modules
GENOMICS_SRCVER = $(shell $(GENERATE) --query=genomics_tarsources perl.yaml)
GENOMICS = $(shell cat genomics/buildorder)
GENOMICSRPMS = $(addprefix perl_$(PERLVER)-,$(GENOMICS)) perl_$(PERLVER)-baseline-genomics

# specific to modules that have autogenerated yaml files
AUTOYAML = $(shell cat buildorder | awk '{print $$2}')
DRPMS = $(addprefix perl_$(PERLVER)-,$(AUTOYAML))

### metacpan targets
metaprep: 
	/bin/cp metacpan/*yaml .

metadownload: metaprep
	(cd ../sources; tar xvf sources-metacpan-$(BASE_SRCVER).tar.gz)
	for name in $(shell cat metacpan/buildorder); do                        \
	    distro=$$($(GENERATE) --query=tarball $$name.yaml -V versions-$(SET).yaml );	\
	    echo "Checking if need to download $$distro ";      \
	    if [ ! -f ../sources/$$distro ]; then 		\
	        make download PKG=$$name SET=$(SET); 		\
	    fi;							\
	done
metaclean:
	for name in $(shell cat metacpan/buildorder) baseline-metacpan; do \
	    /bin/rm -f $$name.yaml;                 \
	done

metaerase: metaclean
	yum -y erase $(BASERPMS)
	for name in $(BASERPMS); do			\
	    rm -rf ../RPMS/x86_64/$$name-[0-9]* ;	\
	done

### bioperl targets
bioprep: 
	/bin/cp bioperl/*yaml .

biodownload: bioprep
	(cd ../sources; tar xvf sources-bioperl-$(BIO_SRCVER).tar.gz)
	for name in $(shell cat bioperl/buildorder); do                        \
	    distro=$$($(GENERATE) --query=tarball $$name.yaml -V versions-$(SET).yaml );	\
	    echo "Checking if need to download $$distro ";      \
	    if [ ! -f ../sources/$$distro ]; then 		\
	        make download PKG=$$name SET=$(SET); 		\
	    fi;							\
	done
bioclean:
	for name in $(shell cat bioperl/buildorder) baseline-bioperl; do \
	    /bin/rm -f $$name.yaml;                 \
	done

bioerase: bioclean
	yum -y erase $(BIORPMS)
	for name in $(BIORPMS); do			\
	    rm -rf ../RPMS/x86_64/$$name-[0-9]* ;	\
	done

### genomics targets
genprep: 
	/bin/cp genomics/*yaml .

gendownload: genprep
	(cd ../sources; tar xvf sources-genomics-$(GENOMICS_SRCVER).tar.gz)
	for name in $(shell cat genomics/buildorder); do                        \
	    distro=$$($(GENERATE) --query=tarball $$name.yaml -V versions-$(SET).yaml );	\
	    echo "Checking if need to download $$distro ";      \
	    if [ ! -f ../sources/$$distro ]; then 		\
	        make download PKG=$$name SET=$(SET); 		\
	    fi;							\
	done
genclean:
	for name in $(shell cat genomics/buildorder) baseline-genomics; do \
	    /bin/rm -f $$name.yaml;                 \
	done

generase: genclean
	yum -y erase $(GENOMICSRPMS)
	for name in $(GENOMICSRPMS); do			\
	    rm -rf ../RPMS/x86_64/$$name-[0-9]* ;	\
	done

### for creating  and adding specific desired modules see ../README.md
MyConfig.pm: MyConfig.pm.in
	sed 's%/root/%$(PWD)/%g' MyConfig.pm.in > MyConfig.pm

sysperl:
	module load perl/$(PERLVER); cpan -l > sysperl

desired-yaml: desired sysperl
	module load perl/$(PERLVER); python depend.py desired

desired-download:
	for name in $(AUTOYAML); do \
	    distro=$$($(GENERATE) --query=tarball $$name.yaml);	\
	    if [ ! -f ../sources/$$distro ]; then 		\
	        make download PKG=$$name; 			\
	    fi;							\
	done

desired-build: desired-download
	for name in $(AUTOYAML); do					\
	    make -e -f $(THISMAKE) $$name.pkg;			\
	    make -e -C $(LOCALREPODIR) createlocalrepo; 		\
	    rpmname=$$($(GENERATE) --query=pkgname $$name.yaml);	\
	    yum -y -c $(LOCALREPODIR)/yum.conf install $$rpmname;	\
	done								\

desired-erase:
	echo $(DRPM)
	yum -y erase $(DRPMS)
	( for name in $(DRPMS); do			\
	  	rm -rf ../RPMS/x86_64/$$name-[0-9]* ;	\
	  done						\
	)
	/bin/rm buildorder

### this target creates provides/requires filters for each module yaml
addfilters::
	if [ -f add-filters.sh ]; then \
		/bin/bash add-filters.sh $(thismod) $(TMPBUILD) "$(GENERATE)"; \
	else \
		echo; \
	fi

clean: metaclean bioclean genclean

debug: 
	echo "VERSIONS: $(VERSIONS)"
	echo "PERLVER: $(PERLVER)"
