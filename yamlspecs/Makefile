# Copyright (c) 2000 - 2019 The Regents of the University of California.
# All rights reserved.	
# This includes the Generic yaml2rpm Makefile - most packaging should
# be able to use this.

include $(YAML2RPM_HOME)/sys/Makefile

# generic settings
SHELL = /bin/bash
PERLVER = $(shell $(GENERATE) --query=version perl.yaml)
BOOTSTRAP_MODULES_FILE = modules.bootstrap
BUILD_MODULES_FILE = modules.build
MANIFEST_FILE = modules.manifest
GROUPS = metacpan bioperl

# specific to metacpan/ modules
BASELINE = $(shell cat metacpan/buildorder)
BASELINELIST = baseline-metacpan
BASERPMS = $(addprefix perl_$(PERLVER)-,$(BASELINE)) perl_$(PERLVER)-baseline-metacpan

# specific to bioperl/ modules
BIO = $(shell cat bioperl/buildorder)
BIOLIST = baseline-bioperl
BIORPMS = $(addprefix perl_$(PERLVER)-,$(BIO)) perl_$(PERLVER)-baseline-bioperl

# specific to modules that have autogenerated yaml files
AUTOYAML = $(shell cat buildorder)
DRPMS = $(subst auto,perl_$(PERLVER),$(AUTOYAML))

# Default target to build bootstrap and all perl modules defined in metacpan/ and bioperl/
default: modules.manifest base bio

modules.manifest: 
	/bin/rm -f $(MANIFEST_FILE)
	cat modules.bootstrap.base > $(MANIFEST_FILE)
	for name in $(GROUPS); do \
	    cat $$name/buildorder >> $(MANIFEST_FILE); \
	    echo baseline-$$name >> $(MANIFEST_FILE); \
	done
	sed -i 's/^/perl_$(PERLVER)-/' modules.manifest

modules.bootstrap:
	cat $@.base metacpan/buildorder > $@
        

### all *base* targets are for metacpan related modules
MyConfig.pm: MyConfig.pm.in
	sed 's%/root/%$(PWD)/%g' MyConfig.pm.in > MyConfig.pm

README.metacpan: metacpan/README.metacpan.in
	sed 's/@VERSION@/$(PERLVER)/' $^ > $@
	
baseprep: MyConfig.pm README.metacpan modules.bootstrap
	echo $(BASELINELIST) > modules.build
	/bin/cp metacpan/*yaml .

basedownload: baseprep
	for name in perl $(BASELINE); do                        \
	    distro=$$($(GENERATE) --query=tarball $$name.yaml);	\
	    echo "Checking if need to download $$distro ";      \
	    if [ ! -f ../sources/$$distro ]; then 		\
	        make download PKG=$$name; 			\
	    fi;							\
	done

baseclean:
	for name in $(BASELINE) $(BASELINELIST); do \
	    /bin/rm -f $$name.yaml;                 \
	done
	/bin/rm -f README.metacpan MyConfig.pm 
	/bin/rm -f modules.build modules.bootstrap

baseerase: baseclean
	yum -y erase $(BASERPMS)
	for name in $(BASERPMS); do			\
	    rm -rf ../RPMS/x86_64/$$name-[0-9]* ;	\
	done

base: basedownload bootstrap
	make -f $(THISMAKE) $(PKGS) 
	make -f $(THISMAKE) baseclean clean

### all *bio* targets are for BioPerl related modules
README.bioperl: bioperl/README.bioperl.in
	sed 's/@VERSION@/$(PERLVER)/' $^ > $@

bioprep: README.bioperl
	/bin/cp bioperl/buildorder modules.bootstrap
	echo $(BIOLIST) > modules.build
	/bin/cp bioperl/*yaml .

biodownload: bioprep
	for name in perl $(BIO); do \
	    distro=$$($(GENERATE) --query=tarball $$name.yaml);	\
	    echo "Checking if need to download $$distro "; \
	    if [ ! -f ../sources/$$distro ]; then 		\
	        make download PKG=$$name; 			\
	    fi;							\
	done

bioclean:
	for name in $(BIO) $(BIOLIST); do \
	    /bin/rm -f $$name.yaml; \
	done
	/bin/rm -f README.bioperl modules.build modules.bootstrap

bioerase: bioclean
	yum -y erase $(BIORPMS)
	for name in $(BIORPMS); do			\
	    rm -rf ../RPMS/x86_64/$$name-[0-9]* ;	\
	done

bio: biodownload  bootstrap
	make -f $(THISMAKE) $(PKGS) 
	make -f $(THISMAKE) bioclean clean

### for creating desired modules yamls
desired-yaml: desired
	module load perl
	python depend.py desired

desired-download:
	for name in $(AUTOYAML); do \
	    distro=$$($(GENERATE) --query=tarball $$name.yaml);	\
	    if [ ! -f ../sources/$$distro ]; then 		\
	        make download PKG=$$name; 			\
	    fi;							\
	done

desired-build: desired-download
	for name in $(AUTOYAML); do					\
	    make -e -f $(THISMAKE) $$name.pkg;			\
	    make -e -C $(LOCALREPODIR) createlocalrepo; 		\
	    rpmname=$$($(GENERATE) --query=pkgname $$name.yaml);	\
	    yum -y -c $(LOCALREPODIR)/yum.conf install $$rpmname;	\
	done								\

desired-erase:
	echo $(DRPM)
	yum -y erase $(DRPMS)
	( for name in $(DRPMS); do			\
	  	rm -rf ../RPMS/x86_64/$$name-[0-9]* ;	\
	  done						\
	)
	/bin/rm buildorder

### this target creates provides/requirtes filters for each module yaml
addfilters::
	if [ -f add-filters.sh ]; then \
		/bin/bash add-filters.sh $(thismod) $(TMPBUILD) "$(GENERATE)"; \
	else \
		echo; \
	fi

debug: diag 
	echo "Modules: $(MODULES)"
	echo "PKGS: $(PKGS)"
	echo $(GENERATE)
	echo "BIO: $(BIO)"
	echo "BASELINE: $(BASELINE)"
