# Copyright (c) 2000 - 2019 The Regents of the University of California.
# All rights reserved.	
# This includes the Generic yaml2rpm Makefile - most packaging should
# be able to use this.

# redefine BUILDALL_TARGETS
#ALL_TARGETS = MyConfig.pm bootstrap default
ALL_TARGETS = bootstrap default
#manifest :: manifestprep
#buildall :: prep
#module-info :: manifestprep

include $(YAML2RPM_HOME)/sys/Makefile

# when building targets for different perl version need to give on a command line
# set name, for example SET='latest'
ifeq ($(SET),)
    VERSIONS := versions.yaml
    GENVERSION = 
    MAKESET = 
else
    VERSIONS := versions-$(SET).yaml
    GENVERSION = "-V  $(VERSIONS)"
    MAKESET = "SET=$(SET)"
    ISMETA = $(findstring meta,$(SET))
    ISGEN = $(findstring gen,$(SET))
    ISBIO = $(findstring bio,$(SET))
endif

PERLVER = $(shell $(GENERATE) --versions=$(VERSIONS) --query=version perl.yaml)

prep: metaprep bioprep genprep alldownload
manifestprep: metaprep bioprep genprep
alldownload: metadownload biodownload gendownload

# specific to metacpan/ modules
BASE_SRCVER = $(shell $(GENERATE) --query=metacpan_tarsources perl.yaml)
BASELINE = $(shell cat metacpan/buildorder)
BASERPMS = $(addprefix perl_$(PERLVER)-,$(BASELINE)) perl_$(PERLVER)-baseline-metacpan

# specific to bioperl/ modules
BIO_SRCVER = $(shell $(GENERATE) --query=bioperl_tarsources perl.yaml)
BIO = $(shell cat bioperl/buildorder)
BIORPMS = $(addprefix perl_$(PERLVER)-,$(BIO)) perl_$(PERLVER)-baseline-bioperl

# specific to genomics/ modules
GENOMICS_SRCVER = $(shell $(GENERATE) --query=genomics_tarsources perl.yaml)
GENOMICS = $(shell cat genomics/buildorder)
GENOMICSRPMS = $(addprefix perl_$(PERLVER)-,$(GENOMICS)) perl_$(PERLVER)-baseline-genomics

# specific to modules that have autogenerated yaml files
AUTOYAML = $(shell cat buildorder | awk '{print $$2}')
DRPMS = $(addprefix perl_$(PERLVER)-,$(AUTOYAML))

## The generic makefile will call make thaw.
## $(ADMIXYAMLS) ~ perl-admix/yamlspecs
## $(STAGEDIR) - where to stage data
FROZEN_NAME = 
ifeq ($(findstring meta,$(SET)),meta)
FROZEN_NAME = metacpan
SRCVER = $(shell $(GENERATE) --query=metacpan_tarsources perl.yaml)
endif
ifeq ($(findstring bio,$(SET)),bio)
FROZEN_NAME = bioperl
SRCVER = $(shell $(GENERATE) --query=bioperl_tarsources perl.yaml)
endif
ifeq ($(findstring gen,$(SET)),gen)
FROZEN_NAME = genomics
SRCVER = $(shell $(GENERATE) --query=genomics_tarsources perl.yaml)
endif

ifneq ($(FROZEN_NAME),)
    FREEZEDIR = $(ADMIXYAMLS)/$(FROZEN_NAME)
    FROZENSOURCES = $(ADMIXROOT)/sources/sources-$(FROZEN_NAME)-$(SRCVER).tar.gz
endif 
#
# Overrride the default thaw target, only if FREEZEDIR is defined
ifneq ($(FROZEN_NAME),)
thawyamls: 
	for name in $(shell cat $(FREEZEDIR)/buildorder) baseline-$(FROZEN_NAME); do		                \
	    if [ ! -f $(STAGEDIR)/$${name}.yaml ]; then /bin/cp -p $(FREEZEDIR)/$${name}.yaml $(STAGEDIR); fi;	\
	done
thawsources:
	(cd $(ADMIXROOT)/sources; tar xvf $(FROZENSOURCES))
	for name in $(shell cat $(FREEZEDIR)/buildorder); do				\
	    tarball=$$($(GENERATE) --versions=$(VERSIONS) --query=tarball $(FREEZEDIR)/$$name.yaml);	\
	    vendor_source=$$($(GENERATE) --versions=$(VERSIONS) --query=vendor_source $(FREEZEDIR)/$$name.yaml);	\
	    [ "x$(SILENT)" != "x" ] ||  echo "Checking if need to download $$tarball ";				\
	    if [ ! -f $(ADMIXROOT)/sources/$$tarball ]; then 				\
	        curl $${vendor_source} --output $(ADMIXROOT)/sources/$$tarball; 	\
	    fi;										\
	done
endif

### metacpan targets
# Only do real work if the set has meta in the name
ifeq ($(findstring meta,$(SET)),meta)
metaprep: 
	for name in $(shell cat metacpan/buildorder) baseline-metacpan; do		\
	    /bin/cp metacpan/$$name.yaml .;						\
	done
metadownload: metaprep
	(cd ../sources; tar xvf sources-metacpan-$(BASE_SRCVER).tar.gz)
	for name in $(shell cat metacpan/buildorder); do				\
	    distro=$$($(GENERATE) --versions=$(VERSIONS) --query=tarball $$name.yaml);	\
	    echo "Checking if need to download $$distro ";				\
	    if [ ! -f ../sources/$$distro ]; then 					\
	        make download PKG=$$name $(MAKESET); 					\
	    fi;										\
	done
metaclean:
	for name in $(shell cat metacpan/buildorder) baseline-metacpan; do		\
	    /bin/rm -f $$name.yaml;							\
	done

metaerase: metaclean
	yum -y erase $(BASERPMS)
	for name in $(BASERPMS); do							\
	    rm -rf ../RPMS/x86_64/$$name-[0-9]* ;					\
	done

else
metaprep metadownload metaclean metaerase:
endif

### bioperl targets
# Only do real work if the set has bio in the name
ifeq ($(findstring bio,$(SET)),bio)
bioprep: 
	for name in $(shell cat bioperl/buildorder) baseline-bioperl; do		\
	    /bin/cp bioperl/$$name.yaml .;						\
	done

biodownload: bioprep
	(cd ../sources; tar xvf sources-bioperl-$(BIO_SRCVER).tar.gz)
	for name in $(shell cat bioperl/buildorder); do					\
	    distro=$$($(GENERATE) --versions=$(VERSIONS) --query=tarball $$name.yaml);	\
	    echo "Checking if need to download $$distro ";				\
	    if [ ! -f ../sources/$$distro ]; then 					\
	        make download PKG=$$name $(MAKESET);					\
	    fi;										\
	done
bioclean:
	for name in $(shell cat bioperl/buildorder) baseline-bioperl; do 		\
	    /bin/rm -f $$name.yaml;							\
	done

bioerase: bioclean
	yum -y erase $(BIORPMS)
	for name in $(BIORPMS); do							\
	    rm -rf ../RPMS/x86_64/$$name-[0-9]* ;					\
	done
else
bioprep biodownload bioclean bioerase:
endif

### genomics targets
# Only do real work if the set has gen in the name
ifeq ($(findstring gen,$(SET)),gen)
genprep: 
	for name in $(shell cat genomics/buildorder) baseline-genomics; do		\
	    /bin/cp genomics/$$name.yaml .;						\
	done

gendownload: genprep
	(cd ../sources; tar xvf sources-genomics-$(GENOMICS_SRCVER).tar.gz)
	for name in $(shell cat genomics/buildorder); do				\
	    distro=$$($(GENERATE) --versions=$(VERSIONS) --query=tarball $$name.yaml);	\
	    echo "Checking if need to download $$distro ";				\
	    if [ ! -f ../sources/$$distro ]; then 					\
	        make download PKG=$$name $(MAKESET);					\
	    fi;										\
	done
genclean:
	for name in $(shell cat genomics/buildorder) baseline-genomics; do 		\
	    /bin/rm -f $$name.yaml;							\
	done

generase: genclean
	yum -y erase $(GENOMICSRPMS)
	for name in $(GENOMICSRPMS); do							\
	    rm -rf ../RPMS/x86_64/$$name-[0-9]* ;					\
	done
else
genprep gendownload genclean generase:
endif

### for creating  and adding specific desired modules see ../README.md
MyConfig.pm: MyConfig.pm.in
	sed 's%/root/%$(PWD)/%g' MyConfig.pm.in > MyConfig.pm

sysperl:
	module load perl/$(PERLVER); cpan -l > sysperl

desired-yaml: desired sysperl
	module load perl/$(PERLVER); python depend.py desired

desired-download:
	for name in $(AUTOYAML); do \
	    distro=$$($(GENERATE) --versions=$(VERSIONS) --query=tarball $$name.yaml);	\
	    if [ ! -f ../sources/$$distro ]; then 					\
	        make download PKG=$$name; 						\
	    fi;										\
	done

desired-build: desired-download
	for name in $(AUTOYAML); do							\
	    make -e -f $(THISMAKE) $$name.pkg;						\
	    make -e -C $(LOCALREPODIR) createlocalrepo; 				\
	    rpmname=$$($(GENERATE) --versions=$(VERSIONS) --query=pkgname $$name.yaml);	\
	    yum -y -c $(LOCALREPODIR)/yum.conf install $$rpmname;			\
	done										\

desired-erase:
	echo $(DRPM)
	yum -y erase $(DRPMS)
	( for name in $(DRPMS); do							\
		rm -rf ../RPMS/x86_64/$$name-[0-9]* ;					\
	  done										\
	)
	/bin/rm buildorder

### this target creates provides/requires filters for each module yaml
addfilters::
	if [ -f add-filters.sh ]; then 							\
		/bin/bash add-filters.sh $(thismod) $(TMPBUILD) "$(GENERATE)";		\
	else										\
		echo;									\
	fi

debug: 
	echo "VERSIONS: $(VERSIONS)"
	echo "PERLVER: $(PERLVER)"
