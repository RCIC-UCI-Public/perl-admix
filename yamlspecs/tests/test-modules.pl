#!/usr/bin/env perl

use strict;
use warnings;

# importing all metacpan modules 
use Class::Method::Modifiers;
use Safe::Isa;
use HTML::Tagset;
use Data::Dump;
use Module::Pluggable;
use Module::Build;
use ExtUtils::Config;
use Eval::Closure;
use Sub::Install;
use HTTP::Date;
use Class::Inspector;
use JSON::MaybeXS;
use Net::SSLeay;
use Encode::Locale;
use Path::Tiny;
use Sub::Exporter::Progressive;
use ExtUtils::Helpers;
use Sort::Naturally;
use Digest::HMAC;
use Mozilla::CA;
use PadWalker;
use PerlIO::utf8_strict;
use Params::Util;
use IO::HTML;
use Term::ReadKey;
use URI;
use Variable::Magic;
use Ref::Util;
use File::Which;
use Role::Tiny::With;
use YAML::XS;
use Sub::Quote;
use Carp::Assert;
use LWP::MediaTypes;
use String::ShellQuote;
use App::cpanminus;
use Exporter::Tiny;
use Devel::OverrideGlobalRequire;
use B::Keywords;
use Try::Tiny;
use Clone::PP;
use Net::HTTP;
use HTTP::Message;
use HTTP::Cookies;
use File::Listing;
use WWW::RobotRules;
use ExtUtils::InstallPaths;
use Module::Build::Tiny;
use HTTP::Daemon;
use HTML::Parser;
use HTTP::Negotiate;
use Authen::NTLM;
use LWP::Debug;
use Data::OptList;
use Sub::Exporter::Util;
use Mixin::Linewise::Readers;
use Config::INI;
use Config::INI::Reader::Ordered;
use Module::Runtime;
use Dist::CheckConflicts;
use Module::Implementation;
use Package::Stash;
use B::Hooks::EndOfScope;
use namespace::clean;
use Params::Validate;
use Getopt::Long::Descriptive;
use Class::Load;
use HTML::Form;
use HTML::Tree;
use WWW::Mechanize;
use App::Nopaste;
use File::HomeDir;
use Devel::Caller;
use Devel::LexAlias;
use Data::Printer;
use Proc::InvokeEditor;
use Class::Unload;
use Class::Refresh;
use Reply;
use Devel::GlobalDestruction;
use Moo::Role;
use Type::Tiny;
use IO::Socket::SSL;
use MetaCPAN::Client;
use Math::Random;
use Jcode;
use OLE::Storage_Lite;
use TimeDate;
use Parse::RecDescent;
use Unicode::Map;
use Spreadsheet::WriteExcel;
use Text::Template::Simple;
use Sys::Info::Base;
use Sys::Info;
use Clone;
say STDERR "Use of metacpan modules OK ";

use IO::String;
use XML::Writer;
use Graph;
use XML::NamespaceSupport;
use Tk;
use Sort::Versions;
use Set::Scalar;
use Capture::Tiny;
use JSON;
use FFI::CheckLib;
use XML::RegExp;
use XML::XPathEngine;
use Sub::Uplevel;
use Devel::StackTrace;
use Test::RequiresInternet;
use List::MoreUtils::XS;
use Algorithm::Diff;
use XML::Parser;
use Data::Grove; # for libxml-perl
use Class::Data::Inheritable;
use File::chdir;
use Error;
use XML::SAX::Base;
use ExtUtils::PkgConfig;
use XML::Filter::BufferText;
use IO::Tty;
use Test::Deep;
use YAML;
use IO::Stringy;
use Mojo::DOM58;
use XML::SAX::Writer;
use Alien::Build;
use IPC::Run;
use List::MoreUtils;
use XML::DOM;
use XML::DOM::XPath;
use Alien::Libxml2;
use XML::SAX;
use XML::LibXML;
use Text::Diff;
use Test::Differences;
use Test::Warn;
use Test::Exception;
use Exception::Class;
use Test::Most;
use XML::Twig;
use XML::LibXSLT;
use GD;
use FreezeThaw;
use MLDBM;
use Data::Stag;
use BioPerl;
use Statistics::Descriptive;
say STDERR "Use of bioperl modules OK ";

use Net::SMTP::SSL;
use Mail::Sendmail;
use MailTools;
use Mail::Sender;
use Email::Date::Format;
use MIME::Lite;
use File::Grep;
use IPC::ShareLite;
use Bio::DB::EMBL;
use File::Slurper;
use Number::Compare;
use Bio::Tools::Run::RemoteBlast;
use Digest::SHA1;
use MRO::Compat;
use Sub::Name;
use Parse::Yapp;
use Test::Fatal;
use Bio::Variation;
use Text::CSV;
use Array::Utils;
use Bio::DB::RefSeq;
use Bio::DB::SwissProt;
use Digest::MD5::File;
use Sub::Identify;
use Text::Glob;
use Params::ValidationCompiler;
use namespace::autoclean;
use Specio;
use Log::Dispatch;
use Log::Log4perl;
use CGI;
use Bio::Cluster;
use Bio::ASN1::EntrezGene;
use Cache::Cache;
use LWP::Protocol::https;
use Bio::DB::NCBIHelper;
use Bio::Procedural;
use Devel::OverloadInfo;
use Package::DeprecationManager  -deprecations => {
    'My::Class::foo' => '0.02',
    'My::Class::bar' => '0.05',
    'feature-X'      => '0.07',
};
use Moose::Exporter;
use Graph::ReadWrite;
use File::Find::Rule;
use File::Copy::Recursive;
use XML::SAX::Expat;
use HTML::Template;
use XML::Simple;
say STDERR "Use of genomics modules OK ";
